package main

import (
    "log"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	//_ "github.com/go-sql-driver/mysql"

)

type Todo struct {
	ID        int
	Title     string
	Completed bool
	CreateAt  time.Time
}

var db *gorm.DB

func main() {
	var err error
	//db, err = gorm.Open("mysql", "root@tcp(localhost:3306)/todoList?parseTime=true")
	//db, err := gorm.Open("mysql", "root:@/todoList?charset=utf8&parseTime=True&loc=Local")
	db, err := gorm.Open("mysql", "root@/todoList?charset=utf8&parseTime=True&loc=Local")

	if err != nil {
		log.Fatal("failed to connect DB")
	}

	db.LogMode(true)

	defer db.Close()
	err = db.AutoMigrate(Todo{}).Error

	if err != nil {
		log.Fatal("failed to migrate table tool")
	}

	router := gin.Default()
	router.GET("/todos", listTodos)
	router.POST("/todos", createTodo)
	router.Run(":8088")

}

func createTodo(c *gin.Context) {
	var argument struct {
		Title string
	}

	err := c.BindJSON(&argument)
	if err != nil {
		c.String(400, "invalid params")
		return
	}

	todo := Todo{
		Title: argument.Title,
	}

	err = db.Create(&todo).Error
	if err != nil {
		c.String(500, "failed to create new todo")
		return
	}

	c.JSON(200, todo)
}

func listTodos(c *gin.Context) {
	var todos []Todo
	err := db.Find(&todos).Error
	if err != nil {
		c.String(500, "failed todoList")
		return
	}

	c.JSON(200, todos)
}
